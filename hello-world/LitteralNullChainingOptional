// Literal (exact, specific) Type
type Size = "small" | "medium" | "large";
let size: Size = "small";

type Quantity = 1 | 2 | 3 | 4 | 5;
let quantity: Quantity = 5;

type Metric = "kg" | "lbs" | "cm" | "in";

// Null Type by using | null or | undefined or | null | undefined it add extra type to the variable
function greet(name: string | null) {
    if (name === null) {
        console.log("Hello, Guest");
    } else {
        console.log(`Hello, ${name}`);
    }
}

// Chaining Type
type Customer = {
    birthday: Date,
};

function getCustomer(id: number): Customer | null | undefined {
    return id === 0 ? null : { birthday: new Date() };
}

let customer = getCustomer(1);
// if (customer !== null !==undefined)
//    console.log(customer.birthday);

// Optional property access operator (?.) it will check if the property is null or undefined then it will not throw error and will return undefined
console.log(customer?.birthday?.getFullYear());

// Optional Element Access Operator useful for using Arrays
// customers?.[0]
// customers?.[0]?.birthday


// Optional call 
let log: any = (message: string) => console.log(message);
log?.("Hello");
